mat <- matrix(0, nrow = n, ncol = x + 1)
buildMatrix <- function(n,x) {
mat <- matrix(0, nrow = n, ncol = x + 1)
vec <- 10^(0:x)
for (i in 1:n) {
t = 1
for (j in vec) {
test <-  t(replicate(1000,isWinnerSame(i,j)))
mat[i, t] = mean(test)
t = t + 1
}
}
mat
}
buildMatrix(3,4)
buildMatrix(6,3)
buildMatrix(10,4)
MAT
mat
xtc
xtc <- NULL
xtc <- mat
xtc <- NULL
buildMatrix <- function(n,x) {
mat <- matrix(0, nrow = n, ncol = x + 1)
vec <- 10^(0:x)
for (i in 1:n) {
t = 1
for (j in vec) {
test <-  t(replicate(1000,isWinnerSame(i,j)))
mat[i, t] = mean(test)
t = t + 1
}
}
xtc <- mat
}
buildMatrix(3,3)
xtc
xtc <- NULL
buildMatrix <- function(n,x) {
mat <- matrix(0, nrow = n, ncol = x + 1)
vec <- 10^(0:x)
for (i in 1:n) {
t = 1
for (j in vec) {
test <-  t(replicate(1000,isWinnerSame(i,j)))
mat[i, t] = mean(test)
t = t + 1
}
}
xtc <- mat
xtc
}
buildMatrix(3,3)
xtc
buildMatrix(10,4)
### Function: Trial
### Inputs: N, the number of candidates that can be voted for
###         X, the number of voters
### Output: Random perference orderings for X voters, voting for N candidates
trial <- function(n, x) {
base <- c(1:n) #Create a vector with values from 1 to n
voters <- matrix(data = prefOrder(base), nrow = x, ncol = n)
for (i in 1:x)
voters[[i]] = prefOrder(base) #give the voter a random preference
voters
}
trial(5,3)
### Function: Trial
### Inputs: N, the number of candidates that can be voted for
###         X, the number of voters
### Output: Random perference orderings for X voters, voting for N candidates
trial <- function(n, x) {
base <- c(1:n) #Create a vector with values from 1 to n
voters <- matrix(data = prefOrder(base), nrow = x, ncol = n)
voters
}
trial(5,3)
trial(5,10)
### Function: Trial
### Inputs: N, the number of candidates that can be voted for
###         X, the number of voters
### Output: Random perference orderings for X voters, voting for N candidates
trial <- function(n, x) {
base <- c(1:n) #Create a vector with values from 1 to n
voters <- matrix(data = prefOrder(base), nrow = x, ncol = n, byrow = TRUE)
voters
}
trial(3,10)
### Function: Trial
### Inputs: N, the number of candidates that can be voted for
###         X, the number of voters
### Output: Random perference orderings for X voters, voting for N candidates
trial <- function(n, x) {
base <- c(1:n) #Create a vector with values from 1 to n
voters <- matrix(data = prefOrder(base), nrow = x, ncol = n)
voters
}
trial(3,10)
trial(6,10)
trial(6,30)
### Function: Trial
### Inputs: N, the number of candidates that can be voted for
###         X, the number of voters
### Output: Random perference orderings for X voters, voting for N candidates
trial <- function(n, x) {
base <- c(1:n) #Create a vector with values from 1 to n
voters <- matrix(prefOrder(base), nrow = x, ncol = length(prefOrder(base)))
voters
}
trial(6,30)
### Function: Trial
### Inputs: N, the number of candidates that can be voted for
###         X, the number of voters
### Output: Random perference orderings for X voters, voting for N candidates
trial <- function(n, x) {
base <- c(1:n) #Create a vector with values from 1 to n
voters <- matrix(prefOrder(base), nrow = x, ncol = length(prefOrder(base)), byrow = TRUE)
voters
}
### Function: findBordaCount
### Inputs: LISTY, a list of voters and their preferences
### Output: The Borda Counts for each candidate
findBordaCount <- function(listy) {
f = length(listy[[1]])
voteCount <- integer(f) #make a vector to keep track of vote totals for each candidate
for (i in 1:length(listy)) {
for (j in 1:f) {
voteCount[j] = voteCount[j] + listy[[i]][j] #add the current voter's points
}
}
voteCount #return the vector containing each candidates point count
}
### Function: Trial
### Inputs: N, the number of candidates that can be voted for
###         X, the number of voters
### Output: Random perference orderings for X voters, voting for N candidates
trial <- function(n, x) {
base <- c(1:n) #Create a vector with values from 1 to n
voters <- matrix(prefOrder(base), nrow = x, ncol = length(prefOrder(base)), byrow = TRUE)
voters
}
trial(20, 5)
trial(20,5)
trial(15,5)
voters <- matrix(0, nrow = x, ncol = length(prefOrder(base)), byrow = TRUE)
### Function: Trial
### Inputs: N, the number of candidates that can be voted for
###         X, the number of voters
### Output: Random perference orderings for X voters, voting for N candidates
trial <- function(n, x) {
base <- c(1:n) #Create a vector with values from 1 to n
voters <- matrix(0, nrow = x, ncol = length(prefOrder(base)), byrow = TRUE)
voters
}
### Function: findBordaCount
### Inputs: LISTY, a list of voters and their preferences
### Output: The Borda Counts for each candidate
findBordaCount <- function(listy) {
f = length(listy[[1]])
voteCount <- integer(f) #make a vector to keep track of vote totals for each candidate
for (i in 1:length(listy)) {
for (j in 1:f) {
voteCount[j] = voteCount[j] + listy[[i]][j] #add the current voter's points
}
}
voteCount #return the vector containing each candidates point count
}
trial(10,3)
voters[row,] = prefOrder(base)
### Function: Trial
### Inputs: N, the number of candidates that can be voted for
###         X, the number of voters
### Output: Random perference orderings for X voters, voting for N candidates
trial <- function(n, x) {
base <- c(1:n) #Create a vector with values from 1 to n
voters <- matrix(0, nrow = x, ncol = length(prefOrder(base)), byrow = TRUE)
for (row in 1:nrow(voters)) {
voters[row,] = prefOrder(base)
}
voters
}
trial(10,3)
trial(10,6)
trial(10,10)
trial(15,10)
### Function: findBordaCount
### Inputs: LISTY, a list of voters and their preferences
### Output: The Borda Counts for each candidate
findBordaCount <- function(matrixy) {
len = ncol(matrixy)
voteCount <- integer(len) #make a vector to keep track of vote totals for each candidate
numVoters <- nrow(matrixy)
for (i in 1:numVoters) {
for (j in 1:len) {
voteCount[j] = voteCount[j] + matrixy[i,j] #add the current voter's points
}
}
voteCount #return the vector containing each candidates point count
}
hey <- trial( 5,6)
hey
findBordaCount(hey)
### Function: findPluralityWinner
### Inputs: LISTY, a list of voters and their preferences
### Output: The Plurality winner/winners (if there is a tie)
findPluralityWinner <- function(matrixy) {
len = nrow(matrixy)
f = ncol(matrixy)
winnerVec <- integer(f) #create a vector keeping track of how many votes each candidate has
for (i in 1:len) {
maxIndex = which.max(matrixy[i,])
winnerVec[maxIndex] = winnerVec[maxIndex] + 1 #add 1 to the voter's top candidate
}
which.max(winnerVec)
# which(winnerVec == max(winnerVec)) #returns the indices of the candidates with the most votes
}
hey
findPluralityWinner(hey)
hey <- trial( 5,6)
hey
findBordaCount(hey)
findPluralityWinner(hey)
buildMatrix(2, 3)
buildMatrix(4, 3)
buildMatrix(4,4)
seasonStats <- read.csv("Season.csv")
subSplit <- subset(splitStats, GP = 12)
splitStats <- read.csv("Split.csv")
seasonStats <- read.csv("Season.csv")
subSplit <- subset(splitStats, GP = 12)
seasonSplit <- subset(seasonStats, GP >= 75)
setwd("~/GitHub/Stats-Final-Project")
splitStats <- read.csv("Split.csv")
seasonStats <- read.csv("Season.csv")
subSplit <- subset(splitStats, GP = 12)
seasonSplit <- subset(seasonStats, GP >= 75)
What <- merge(subSplit,seasonSplit, by = "Player")
cutDown <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y"))
head(What)
splitStats <- read.csv("Split.csv")
seasonStats <- read.csv("Season.csv")
subSplit <- subset(splitStats, GP == 12)
seasonSplit <- subset(seasonStats, GP >= 75)
What <- merge(subSplit,seasonSplit, by = "Player")
cutDown <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y"))
head(cutDown)
gameStats <- read.csv("GamebyGame.csv")
t <- merge(What, gameStats, by = "Player")
t
cutDown <- subset(t, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y"))
head(cutDown)
head(gameStats)
colnames(gameStats)
gameStats$Goals
cutDown <- subset(t, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "Goals"))
head(cutDown)
head(cutDown,10)
head(cutDown,12)
head(cutDown,24)
cutDown$Player = "ALEX KILLORN"
cutDown
cutDown <- subset(t, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "Goals"))
cutDown$ratio <- cutDown$Goals.x/cutDown$GP.x
cutDown$Player == "ALEX KILLORN"
spliff <- split(cutDown, cutDown$Player)
spliff
head(spliff)
View(spliff)
head(cutDown)
head(cutDown, n= 100)
View(cutDown)
View(cutDown)
but <- sapply(split, mean)
cutDown$Player
mom <- by(cutDown, cutDown$player, mean)
mom <- by(cutDown, cutDown$Player, mean)
warnings()
mom
head(mom)
but <- sapply(split$Goals, mean)
but <- sapply(split.Goals, mean)
mom <- by(cutDown$Goals, cutDown$Player, mean)
mom
tail(cutDown)
tail(cutDown,n=36)
tail(cutDown,n=100)
dad <- by(cutDown$Goals, cutDown$Player, sd)
dad
find(cutDown$Player, "Nazem")
match("NAZEM KADRI", cutDown$Player)
cutDown[661,]
cutDown[661:670,]
cutDown[660
:670,]
cutDown[661:673,]
head(dad)
colnames(dad)
rownames(dad)
dad[!is.na(dad)]
values <- dad[!is.na(dad)]
head(values)
433/12
82 x 12
82*12
head(values)
head(values)
cutDown$Player
head(t)
head(cutDown)
var(values)
sd(values)
sd(values) ** 2
sd(values) ^ 2
var(cutDown$Goals)
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "Goals"))
splitStats <- read.csv("Split.csv")
seasonStats <- read.csv("Season.csv")
gameStats <- read.csv("GamebyGame.csv")
subSplit <- subset(splitStats, GP == 12)
seasonSplit <- subset(seasonStats, GP >= 75)
What <- merge(subSplit,seasonSplit, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "Goals"))
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y"))
head(cutDown2)
cutDown2$ratio <- cutDown$Goals.x/cutDown$GP.x
cutDown2$ratio <- cutDown2$Goals.x/cutDown2$GP.x
cutDown$ratio
car(cutDown$ratio)
var(cutDown$ratio)
mean(cutDown$ratio)
shrinkage <- c()
car(cutDown2$ratio)
var(cutDown2$ratio)
shrinkage[i] = 1 - (79 * values[i])/var(cutDown2$ratio)
for (i in 1:length(values)) {
shrinkage[i] = 1 - (79 * values[i])/var(cutDown2$ratio)
}
head(shrinkage)
for (i in 1:length(values)) {
shrinkage[i] = 1 - (79 * values[i])/var(cutDown$ratio)
}
head(shrinkage)
shrinkage <- c()
for (i in 1:length(values)) {
shrinkage[i] = 1 - (79 * values[i])/var(cutDown$ratio)
}
head(shrinkage)
cutDown2$ratio
cutdown2[2,]
cutDown2[2,]
sum(cutDown2$ratio - mean(cutDown2$ratio))
values
shrinkage <- c()
for (i in 1:length(values)) {
shrinkage[i] = 1 - (2 * values[i])/var(cutDown2$ratio)
}
head(shrinkage)
dad <- by(cutDown$Goals, cutDown$Player, var)
values <- dad[!is.na(dad)]
head(values)
shrinkage <- c()
for (i in 1:length(values)) {
shrinkage[i] = 1 - (79 * values[i])/var(cutDown2$ratio)
}
head(shrinkage)
head(cutDown2)
sum((cutDown2$ratio - mean(cutdown$ratio))^2)
sum((cutDown2$ratio - mean(cutDown$ratio))^2)
shrinkage <- c()
for (i in 1:length(values)) {
shrinkage[i] = 1 - (79 * values[i])/sum((cutDown2$ratio - mean(cutDown$ratio))^2)
}
head(shrinkage)
for (i in 1:length(values)) {
shrinkage[i] = 1 - (79 * values[i])/sum((cutDown2$ratio - mean(cutDown2$ratio))^2)
}
head(shrinkage)
cutDown2$ratio <- cutDown2$Goals.x/cutDown2$GP.x
head(cutDown2$ratio)
head(values)
var(cutDown$Goals)
var(cutDown2$ratios)
var(cutDown2$ratio)
shrinkage[i] = 1 - (79 * 0.02421146/sum((cutDown2$ratio - mean(cutDown2$ratio))^2)
}
for (i in 1:length(values)) {
}
head(shrinkage)
shrinkage <- c()
for (i in 1:length(values)) {
}
shrinkage <- c()
for (i in 1:length(values)) {
shrinkage[i] = 1 - (79 * 0.02421146/sum((cutDown2$ratio - mean(cutDown2$ratio))^2))}
head(shrinkage)
mean(cutDown$Goals)
var(cutDown$Goals)
dad <- by(cutDown$Goals, cutDown$Player, var)
dad
values <- dad[!is.na(dad)]
values
splitStats <- read.csv("Split.csv")
seasonStats <- read.csv("Season.csv")
gameStats <- read.csv("GamebyGame.csv")
subSplit <- subset(splitStats, GP == 12)
What <- merge(subSplit,seasonSplit, by = "Player")
t <- merge(What, gameStats, by = "Player")
splitStats <- read.csv("Split.csv")
head(splitStats)
head(splitStats$iSF)
splitStats$iSF
subset(splitStats, isF = 22)
a <- subset(splitStats, isF = 22)
a
head(a)
a <- subset(splitStats, isF == 22)
a <- subset(splitStats, iSF == 22)
head(a)
size(a)
numrows(a)
numrow(a)
nrows(a)
nrow(a)
subSplit <- subset(splitStats, iSF == 23)
nrows(subSPlit)
nrows(subSplit)
nrow(subSplit)
subSplit <- subset(splitStats, iSF == 30)
seasonSplit <- subset(seasonStats, GP >= 75)
nrow(subSplit)
head(splitStats)
subSplit <- subset(splitStats, iSF == 30)
seasonSplit <- subset(seasonStats, GP >= 75)
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y"))
What
cutDown2
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(subSplit, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y"))
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y"))
subSplit <- subset(splitStats, iSF > 20)
seasonSplit <- subset(seasonStats, GP >= 75)
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y"))
cutDown(2)
cutDown2
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "iSF"))
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "iSF.x"))
cutDown2
mean(cutDown2$iSF)
subSplit <- subset(splitStats, 26 <= iSF <= 32)
seasonSplit <- subset(seasonStats, GP >= 75)
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "iSF.x"))
cutDown2
subSplit <- subset(splitStats, iSF <= 32 and iSF >= 28)
subSplit <- subset(splitStats, iSF <= 32 && iSF >= 28)
seasonSplit <- subset(seasonStats, GP >= 75)
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "iSF.x"))
cutDown2
subSplit <- subset(splitStats, iSF <= 35 && iSF >= 25)
seasonSplit <- subset(seasonStats, GP >= 75)
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "iSF.x"))
subSplit <- subset(splitStats, (iSF <= 35) && (iSF >= 25)
subSplit <- subset(splitStats, (iSF <= 35) && (iSF >= 25))
subSplit <- subset(splitStats, iSF == 22 || iSF == 23)
subSplit <- subset(splitStats, iSF == 22)
subSplit <- subset(splitStats, iSF == 22)
seasonSplit <- subset(seasonStats, GP >= 70)
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "iSF.x"))
subSplit <- subset(splitStats, iSF >= 22)
subSplit <- subset(subSplit, iSF <= 30 )
seasonSplit <- subset(seasonStats, GP >= 70)
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "iSF.x"))
subSplit <- subset(splitStats, iSF >= 22)
subSplit <- subset(subSplit, iSF <= 25 )
seasonSplit <- subset(seasonStats, GP >= 70)
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "iSF.x"))
subSplit <- subset(splitStats, iSF >= 22)
subSplit <- subset(subSplit, iSF <= 24 )
seasonSplit <- subset(seasonStats, GP >= 70)
# head(gameStats)
What <- merge(subSplit,seasonSplit, by = "Player")
# t <- merge(What, gameStats, by = "Player")
cutDown2 <- subset(What, select=c("Player", "GP.x", "Goals.x", "GP.y", "Goals.y", "iSF.x"))
