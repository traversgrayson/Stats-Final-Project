ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable, size = 0.5)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable, size = 0.002)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable, size = 0.002)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable, size = 0.002)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
###     Code for Line-Plots inspired by Michael Lopez     ###
### ----------------------------------------------------- ###
cutDownSP <- subset(cutDownData, select=c("Player", "SvP.x", "JS", "SvP.y"))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable, size = 0.002)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable, size = 0.0000001)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable, size = 100)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable, size = 100)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0))
View(gameStats)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error")
ggplot(cutDown.long,aes(Player,value,fill=variable))+
stat_smooth(method=lm, fullrange = TRUE)
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error")
ggplot(cutDown.long,aes(Player,value,fill=variable))+
stat_smooth(method=lm, fullrange = TRUE) +
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error")
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_smooth(method=lm, fullrange = TRUE) +
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error")
cutDown.long
model <- glm(value~SMMS, family=poisson, data=cutDown)
model <- glm(Player~SMMS, family=poisson, data=cutDown)
model <- glm(Player~SMMS, family=poisson, data=cutDown)
cutDown
avMLE <- mean(cutDown$SMMS)
avJS <- mean(cutDown$JSMS)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_line(aes(y = avMLE))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_line(y= avMLE)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(yintercept = avMLE)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(yintercept = avMLE) +
geom_hline(yintercept = avJS)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE, color = variable)) +
geom_hline(yintercept = avJS)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE, color = variable)) +
geom_hline(aes(yintercept = avJS, color = variable))
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression('MLE'[theta]), "JS" = expression('JS'[theta]),
"SvP.y" = expression(theta))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
cutDown$Player <- sub(".*? (.+)", "\\1", cutDown$Player)
cutDown.long<-melt(cutDown)
avMLE <- mean(cutDown$SMMS)
avJS <- mean(cutDown$JSMS)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE, color = variable)) +
geom_hline(aes(yintercept = avJS, color = variable))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE, color = red)) +
geom_hline(aes(yintercept = avJS, color = blue))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE, color = "red")) +
geom_hline(aes(yintercept = avJS, color = "blue"))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE, color = "red"), inherit.aes = TRUE) +
geom_hline(aes(yintercept = avJS, color = "blue"))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE, color = "red")) +
geom_hline(aes(yintercept = avJS, color = "blue"))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE, color = "orange")) +
geom_hline(aes(yintercept = avJS, color = "purple"))
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE)) +
geom_hline(aes(yintercept = avJS))
splitStats <- read.csv("GoalieSplit.csv")
seasonStats <- read.csv("GoalieSeason.csv")
gameStats <- read.csv("GamebyGame.csv")
# Keep only the players who have between 150-350 shots against in the first split,
# and played at least 50 games in the season
subSplit <- subset(splitStats, SA >= 150)
subSplit <- subset(subSplit, SA <= 350)
seasonSplit <- subset(seasonStats, GP >= 50)
# Merge the split and season data and remove unnecessary columns
mergedData <- merge(subSplit,seasonSplit, by = "Player")
cutDownData <- subset(mergedData, select=c("Player", "GA.x", "SA.x", "GA.y", "SA.y", "Sv..x", "Sv..y"))
cutDownData$SvP.x <- cutDownData$Sv..x/100
cutDownData$SvP.y <- cutDownData$Sv..y/100
sum(cutDownData$SA.x)
# Caulculate the shrinkage c for the JS Estimator
k <- nrow(cutDownData) # number of unknown means
pbar <- mean(cutDownData$SvP.x)#total average of averages
n <- mean(cutDownData$SA.x) #average number of shots against
phat <- cutDownData$SvP.x # Sample means, the MLEs
c <- 1 - (k-3)*(pbar*(1 - pbar)/n)/sum((phat - pbar)^2) # apply the shrinkage formula
cAdjust <- mapply(min, c, 1)
cAdjust <- mapply(max,c, 0)
cAdjust
# Calculate our MSE values for JS Estimator and the MLE (SvP.x)
meanSq <- function(x, y){sqrt(mean((x-y)^2))}
cutDownData$JS <- pbar + cAdjust*(phat - pbar) # create a column for JS estimates
cutDownData$SMMS <- mapply(meanSq,cutDownData$SvP.x, cutDownData$SvP.y)
cutDownData$JSMS <- mapply(meanSq,cutDownData$JS, cutDownData$SvP.y)
meanSq(cutDownData$SvP.x, cutDownData$SvP.y) ## total MLE MSE
meanSq(cutDownData$JS, cutDownData$SvP.y)
meanSq(pbar, cutDownData$SvP.y) ## total JS MSE
cutDown <- subset(cutDownData, select=c("Player", "SMMS", "JSMS"))
cutDown$Player <- sub(".*? (.+)", "\\1", cutDown$Player)
cutDown.long<-melt(cutDown)
avMLE <- mean(cutDown$SMMS)
avJS <- mean(cutDown$JSMS)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE)) +
geom_hline(aes(yintercept = avJS))
cutDownSP <- subset(cutDownData, select=c("Player", "SvP.x", "JS", "SvP.y"))
cutDownSP$Player <- sub(".*? (.+)", "\\1", cutDownSP$Player)
cutDownSP <- cutDownSP[sample(nrow(cutDownSP),10),]
cutDownSP.long<-melt(cutDownSP)
SPmelt <- melt(cutDownSP, id="Player")
attach(SPmelt)
new <- SPmelt[order(SPmelt$Player),]
detach(SPmelt)
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression('MLE'[theta]), "JS" = expression('JS'[theta]),
"SvP.y" = expression(theta))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(theta['MLE']), "JS" = expression('JS'[theta]),
"SvP.y" = expression(theta))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(theta['MLE']), "JS" = expression(theta["JS"]),
"SvP.y" = expression(theta))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(theta['MLE']), "JS" = expression(phat["JS"]),
"SvP.y" = expression(theta))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
geom_line(aes(group=Player, color=Player), linetype="solid") +
ggplot(data=new, aes(x=variable, y=value)) +
geom_point(aes(color=Player)) +
"SvP.y" = expression(p))) +
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p["JS"]),
"SvP.y" = expression(p)))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p')))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p')))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p'["season"]))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
cutDownSP <- subset(cutDownData, select=c("Player", "SvP.x", "JS", "SvP.y"))
cutDownSP$Player <- sub(".*? (.+)", "\\1", cutDownSP$Player)
cutDownSP <- cutDownSP[sample(nrow(cutDownSP),12),]
cutDownSP.long<-melt(cutDownSP)
SPmelt <- melt(cutDownSP, id="Player")
attach(SPmelt)
new <- SPmelt[order(SPmelt$Player),]
detach(SPmelt)
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p'["season"]))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
cutDown
cutDownData
tableData <- subset(cutDownData, select=c("Player","SvP.x","SvP.y","JS", "SMMS", "JSMS"))
tableData
tableD <- table(tableDat)
tableD <- table(tableData)
tableD
# Keep only the players who have between 150-350 shots against in the first split,
# and played at least 50 games in the season
subSplit <- subset(splitStats, SA >= 150)
subSplit <- subset(subSplit, SA <= 350)
seasonSplit <- subset(seasonStats, GP >= 50)
# Merge the split and season data and remove unnecessary columns
mergedData <- merge(subSplit,seasonSplit, by = "Player")
cutDownData <- subset(mergedData, select=c("Player", "GA.x", "SA.x", "GA.y", "SA.y", "Sv..x", "Sv..y"))
cutDownData$SvP.x <- cutDownData$Sv..x/100
cutDownData$SvP.y <- cutDownData$Sv..y/100
sum(cutDownData$SA.x)
# Caulculate the shrinkage c for the JS Estimator
k <- nrow(cutDownData) # number of unknown means
pbar <- mean(cutDownData$SvP.x)#total average of averages
n <- mean(cutDownData$SA.x) #average number of shots against
phat <- cutDownData$SvP.x # Sample means, the MLEs
c <- 1 - (k-3)*(pbar*(1 - pbar)/n)/sum((phat - pbar)^2) # apply the shrinkage formula
cAdjust <- mapply(min, c, 1)
cAdjust <- mapply(max,c, 0)
cAdjust
# Calculate our MSE values for JS Estimator and the MLE (SvP.x)
meanSq <- function(x, y){sqrt(mean((x-y)^2))}
cutDownData$JS <- pbar + cAdjust*(phat - pbar) # create a column for JS estimates
cutDownData$SMMS <- mapply(meanSq,cutDownData$SvP.x, cutDownData$SvP.y)
cutDownData$JSMS <- mapply(meanSq,cutDownData$JS, cutDownData$SvP.y)
meanSq(cutDownData$SvP.x, cutDownData$SvP.y) ## total MLE MSE
meanSq(cutDownData$JS, cutDownData$SvP.y)
meanSq(pbar, cutDownData$SvP.y) ## total JS MSE
0.01881867/0.008430252
avMLE
avJS
avMLE/avJS
avMLE <- mean(cutDown$SMMS)
avJS <- mean(cutDown$JSMS)
avMLE/avJS
tableData <- subset(cutDownData, select=c("Player","SvP.x","JS","SvP.y", "SMMS", "JSMS"))
xtable(tableData)
# _________ #
### TABLE ###
# _________ #
library(xtable)
# _________ #
### TABLE ###
# _________ #
install.packages("xtable")
library(xtable)
tableData <- subset(cutDownData, select=c("Player","SvP.x","JS","SvP.y", "SMMS", "JSMS"))
xtable(tableData)
colnames(cutDownData)
colnames(mergedData)
begData <- subset(mergedData, select=c("Player","GA.x","SA.x","SvP.x", "GP.x"))
begData <- subset(mergedData, select=c("Player","GA.x","SA.x","SvP.x", "GP.y"))
cutDownData <- subset(mergedData, select=c("Player", "GA.x", "SA.x", "GA.y", "SA.y", "Sv..x", "Sv..y", "GP.y"))
begData <- subset(cutDownData, select=c("Player","GA.x","SA.x","SvP.x","GP.y" ))
cutDownData
cutDownData$SvP.x <- cutDownData$Sv..x/100
cutDownData$SvP.y <- cutDownData$Sv..y/100
begData <- subset(cutDownData, select=c("Player","GA.x","SA.x","SvP.x","GP.y" ))
xtable(begData)
begData <- subset(cutDownData, select=c("Player","GA.x","SA.x","SvP.x","SvP.y", "GP.y" ))
xtable(begData)
cutDownData
# Merge the split and season data and remove unnecessary columns
mergedData <- merge(subSplit,seasonSplit, by = "Player")
cutDownData <- subset(mergedData, select=c("Player", "GA.x", "SA.x", "GA.y", "SA.y", "Sv..x", "Sv..y", "GP.y"))
cutDownData$SvP.x <- cutDownData$Sv..x/100
cutDownData$SvP.y <- cutDownData$Sv..y/100
sum(cutDownData$SA.x)
# Caulculate the shrinkage c for the JS Estimator
k <- nrow(cutDownData) # number of unknown means
pbar <- mean(cutDownData$SvP.x)#total average of averages
n <- mean(cutDownData$SA.x) #average number of shots against
phat <- cutDownData$SvP.x # Sample means, the MLEs
c <- 1 - (k-3)*(pbar*(1 - pbar)/n)/sum((phat - pbar)^2) # apply the shrinkage formula
cAdjust <- mapply(min, c, 1)
cAdjust <- mapply(max,c, 0)
cAdjust
# Calculate our MSE values for JS Estimator and the MLE (SvP.x)
meanSq <- function(x, y){sqrt(mean((x-y)^2))}
cutDownData$JS <- pbar + cAdjust*(phat - pbar) # create a column for JS estimates
cutDownData$SMMS <- mapply(meanSq,cutDownData$SvP.x, cutDownData$SvP.y)
cutDownData$JSMS <- mapply(meanSq,cutDownData$JS, cutDownData$SvP.y)
meanSq(cutDownData$SvP.x, cutDownData$SvP.y) ## total MLE MSE
meanSq(cutDownData$JS, cutDownData$SvP.y)
meanSq(pbar, cutDownData$SvP.y) ## total JS MSE
# _________ #
### TABLE ###
# _________ #
install.packages("xtable")
install.packages("xtable")
mean(cutDownData$JSMS)
mean(cutDownData$SMMS)
mean(cutDownData$JSMS)/ mean(cutDownData$SMMS)
mean(cutDownData$SMMS)/mean(cutDownData$JSMS)
cutDownData$which = cutdownData$JSMS <= cutdownData$SMMS
# _________ #
### TABLE ###
# _________ #
cutDownData$which = cutdownData$JSMS <= cutdownData$SMMS
# _________ #
### TABLE ###
# _________ #
cutDownData$which <- cutdownData$JSMS <= cutdownData$SMMS
splitStats <- read.csv("GoalieSplit.csv")
seasonStats <- read.csv("GoalieSeason.csv")
gameStats <- read.csv("GamebyGame.csv")
# Keep only the players who have between 150-350 shots against in the first split,
# and played at least 50 games in the season
subSplit <- subset(splitStats, SA >= 150)
subSplit <- subset(subSplit, SA <= 350)
seasonSplit <- subset(seasonStats, GP >= 50)
# Merge the split and season data and remove unnecessary columns
mergedData <- merge(subSplit,seasonSplit, by = "Player")
cutDownData <- subset(mergedData, select=c("Player", "GA.x", "SA.x", "GA.y", "SA.y", "Sv..x", "Sv..y", "GP.y"))
cutDownData$SvP.x <- cutDownData$Sv..x/100
cutDownData$SvP.y <- cutDownData$Sv..y/100
sum(cutDownData$SA.x)
# Caulculate the shrinkage c for the JS Estimator
k <- nrow(cutDownData) # number of unknown means
pbar <- mean(cutDownData$SvP.x)#total average of averages
n <- mean(cutDownData$SA.x) #average number of shots against
phat <- cutDownData$SvP.x # Sample means, the MLEs
c <- 1 - (k-3)*(pbar*(1 - pbar)/n)/sum((phat - pbar)^2) # apply the shrinkage formula
cAdjust <- mapply(min, c, 1)
cAdjust
cAdjust <- mapply(max,c, 0)
# Calculate our MSE values for JS Estimator and the MLE (SvP.x)
meanSq <- function(x, y){sqrt(mean((x-y)^2))}
cutDownData$JS <- pbar + cAdjust*(phat - pbar) # create a column for JS estimates
cutDownData$SMMS <- mapply(meanSq,cutDownData$SvP.x, cutDownData$SvP.y)
cutDownData$JSMS <- mapply(meanSq,cutDownData$JS, cutDownData$SvP.y)
meanSq(cutDownData$SvP.x, cutDownData$SvP.y) ## total MLE MSE
meanSq(cutDownData$JS, cutDownData$SvP.y)
meanSq(pbar, cutDownData$SvP.y) ## total JS MSE
mean(cutDownData$JSMS)
mean(cutDownData$SMMS)
# _________ #
### TABLE ###
# _________ #
cutDownData$which <- cutdownData$JSMS <= cutdownData$SMMS
# _________ #
### TABLE ###
# _________ #
cutDownData$which <- cutDownData$JSMS <= cutDownData$SMMS
cutDownData$which
pbar
(pbar*(1 - pbar)/n)
c
xtable(begData, digits= 4)
xtable(tableData, digits  =4)
pbar
cutDownSP <- subset(cutDownData, select=c("Player", "SvP.x", "JS", "SvP.y"))
cutDownSP$Player <- sub(".*? (.+)", "\\1", cutDownSP$Player)
cutDownSP <- cutDownSP[sample(nrow(cutDownSP),12),]
cutDownSP.long<-melt(cutDownSP)
SPmelt <- melt(cutDownSP, id="Player")
attach(SPmelt)
new <- SPmelt[order(SPmelt$Player),]
detach(SPmelt)
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p'["season"]))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage") +
geom_hline(aes(yintercept = pbar))
#--------------------------------------------#
#--------------------------------------------#
cutDownSP <- subset(cutDownData, select=c("Player","SvP.y"))
cutDownSP$Player <- sub(".*? (.+)", "\\1", cutDownSP$Player)
cutDownSP <- cutDownSP[sample(nrow(cutDownSP),12),]
cutDownSP.long<-melt(cutDownSP)
SPmelt <- melt(cutDownSP, id="Player")
attach(SPmelt)
new <- SPmelt[order(SPmelt$Player),]
detach(SPmelt)
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p'["season"]))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage") +
geom_hline(aes(yintercept = pbar))
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p'["season"]))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage") +
geom_hline(aes(yintercept = pbar))
cutDown <- subset(cutDownData, select=c("Player", "SMMS", "JSMS"))
cutDown$Player <- sub(".*? (.+)", "\\1", cutDown$Player)
cutDown.long<-melt(cutDown)
avMLE <- mean(cutDown$SMMS)
avJS <- mean(cutDown$JSMS)
ggplot(cutDown.long,aes(Player,value,fill=variable))+
geom_point(stat="identity",position="dodge", aes(color = variable)) +
theme(axis.text.x=element_text(angle = -55, hjust = 0)) +
labs(title = "Mean Squared Error of MLE vs JS", y = "Mean Squared Error") +
geom_hline(aes(yintercept = avMLE)) +
geom_hline(aes(yintercept = avJS))
cutDownSP <- subset(cutDownData, select=c("Player", "SvP.x", "JS", "SvP.y"))
cutDownSP$Player <- sub(".*? (.+)", "\\1", cutDownSP$Player)
cutDownSP <- cutDownSP[sample(nrow(cutDownSP),12),]
cutDownSP.long<-melt(cutDownSP)
SPmelt <- melt(cutDownSP, id="Player")
attach(SPmelt)
new <- SPmelt[order(SPmelt$Player),]
detach(SPmelt)
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p'["season"]))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
cutDownSP <- subset(cutDownData, select=c("Player", "SvP.x", "JS", "SvP.y"))
cutDownSP$Player <- sub(".*? (.+)", "\\1", cutDownSP$Player)
cutDownSP.long<-melt(cutDownSP)
attach(SPmelt)
SPmelt <- melt(cutDownSP, id="Player")
new <- SPmelt[order(SPmelt$Player),]
detach(SPmelt)
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p'["season"]))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage")
ggplot(data=new, aes(x=variable, y=value)) +
geom_line(aes(group=Player, color=Player), linetype="solid") +
geom_point(aes(color=Player)) +
scale_x_discrete(labels=c("SvP.x" = expression(hat(p)['MLE']), "JS" = expression(hat(p)["JS"]),
"SvP.y" = expression('p'["season"]))) +
labs(title = "Visualization of Stein-Estimator", x = "Estimator", y = "Save Percentage") +
geom_hline(aes(yintercept = pbar))
View(new)
